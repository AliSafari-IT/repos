source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("forecast")
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArimaScript.r')
source('C:/Projects/FinalPEM/autoArima/AutoArimaScript.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArimaScript.r', echo=TRUE)
install.packages("forecast")
# Output to be created as png file
png(file = "TimeSeriesGFG.png")
# Plotting graph without forecasting
plot(BJsales, main = "Graph without forecasting",
col.main = "darkgreen")
# Saving the file
dev.off()
# Plotting graph without forecasting
plot(BJsales, main = "Graph without forecasting",
col.main = "darkgreen")
# Saving the file
dev.off()
# Output to be created as png file
png(file = "TimeSeriesGFG.png")
# Saving the file
dev.off()
# Output to be created as png file
png(file = "TimeSeriesARIMAGFG.png")
# Next 10 forecasted values
forecastedValues <- forecast(fit, 10)
# Next 10 forecasted values
forecastedValues <- forecast(fit, 10)
# Install the library for forecast()
install.packages("forecast")
# Next 10 forecasted values
forecastedValues <- forecast(fit, 10)
source('C:/Projects/FinalPEM/autoArima/AutoArimaScript.r', echo=TRUE)
View(fit)
View(forecastedValues)
source('C:/Projects/FinalPEM/autoArima/AutoArimaScript.r', echo=TRUE)
install.packages("forecast")
# Output to be created as png file
png(file = "TimeSeries2GFG.png")
# Plotting graph without forecasting
plot(EuStockMarkets[, "DAX"],
main = "Graph without forecasting",
col.main = "darkgreen")
# Saving the file
dev.off()
# Output to be created as png file
png(file = "TimeSeriesARIMA2GFG.png")
# Fitting model using arima model
fit <- auto.arima(EuStockMarkets[, "DAX"])
# Next 50 forecasted values
forecastedValues <- forecast(fit, 50)
# Print forecasted values
print(forecastedValues)
plot(forecastedValues, main = "Graph with forecasting",
col.main = "darkgreen")
# saving the file
dev.off()
# Output to be created as png file
png(file = "TimeSeries2GFG.png")
# Plotting graph without forecasting
plot(EuStockMarkets[, "DAX"],
main = "Graph without forecasting",
col.main = "darkgreen")
# Saving the file
dev.off()
setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('C:/Projects/FinalPEM/autoArima/AutoArimaScript.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r')
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r')
ls
ls
ls
ls
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r')
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
Data_Q1 = read.csv("EAN541448860004121675_energyTypeAplus_Data_Q1.csv")  # read csv file
Data_Q1
Data_Q1 = read.csv("Data_Q1_A")  # read csv file
Data_Q1
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
# output to be created as png file
png(file = "TimeSeries_DataQ1A.png")
# Plotting graph without forecasting
plot(Data_Q1[, "Data_Q1"],
main = "Graph without forecasting",
col.main = "darkgreen")
# Saving the file
dev.off()
# Output to be created as png file
png(file = "TimeSeriesARIMA_DataQ1A.png")
# Fitting model using arima model
fit <- auto.arima(Data_Q1[, "Data_Q1"])
# Next 50 forecasted values
forecastedValues <- forecast(fit, 96)
# Print forecasted values
print(forecastedValues)
plot(forecastedValues, main = "Graph with forecasting",
col.main = "darkgreen")
# saving the file
dev.off()
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
install.packages("forecast")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
Data_Q1 = read.csv("Data_Q1_A")  # read csv file
Data_Q1[, "Data_Q1"]
# Fitting model using arima model
fit <- auto.arima(Data_Q1[, "Data_Q1"])
fit
# Next 50 forecasted values
forecastedValues <- forecast(fit, 1)
forecastedValues
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
install.packages("xlsx")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
myDailySeries = Data_daily[, "Consumption_Type_A"]
myDailySeries
Data_daily = read.csv("EAN541448860004121675_daily.csv")  # read csv file
myDailySeries = Data_daily[, "Consumption_Type_A"]
myDailySeries
Data_daily = read.csv("EAN541448860004121675_daily.csv")  # read csv file
myDailySeries = Data_daily[, "Consumption_Type_A"]
print(myDailySeries)
Data_daily = read.csv("EAN541448860004121675_daily.csv")  # read csv file
print(Data_daily)
myDailySeries = Data_daily[, "Consumption_Type_A"]
print(Data_daily)
Data_daily = read.csv("EAN541448860004121675_daily.csv")  # read csv file
Data_daily
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
install.packages("forecast")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
#export the Arima results
sink("ARIMA_result_Daily.txt")
arima(myDailySeries, order = c(5, 1, 1), method = "ML")
sink()
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
install.packages("forecast")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Q1_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
components.ts = decompose(Data_daily)
Data_daily = read.csv("EAN541448860004121675_daily.csv")  # read csv file
components.ts = decompose(Data_daily)
library("fUnitRoots")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
library("fUnitRoots")
urkpssTest(Data_daily, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary = diff(Data_daily, differences=1)
plot(tsstationary)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
library(fUnitRoots) # for analyzing trends and unit roots in time series
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
install.packages("fUnitRoots")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
plot(tsstationary)
tsstationary = diff(Data_daily, differences=1)
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary = diff(Data_daily, differences=1)
plot(tsstationary)
print(tsData)
print(Data_daily)
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
# Install the library for forecast()
install.packages("forecast")
Data_daily = read.csv("EAN541448860004121675_daily.csv")  # read csv file
myDailySeries = Data_daily[, "Consumption_Type_A"]
tsData = myDailySeries
tsData
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary = diff(Data_daily, differences=1)
plot(tsstationary)
#Normally the autocorrelation continues to decrease as the lag increases, confirming that there is no linear association between observations separated by larger lags.
acf(Data_daily,lag.max=34) #to determine the number of first differences required to make the time series non-seasonal
timeseriesseasonallyadjusted <- tsData- timeseriescomponents$seasonal
tsstationary <- diff(timeseriesseasonallyadjusted, differences=1)
acf(tsstationary, lag.max=34)
pacf(tsstationary, lag.max=34)
acf(tsstationary, lag.max=100)
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary = diff(Data_daily, differences=1)
plot(tsstationary)
#Normally the autocorrelation continues to decrease as the lag increases, confirming that there is no linear association between observations separated by larger lags.
acf(Data_daily,lag.max=34) #to determine the number of first differences required to make the time series non-seasonal
timeseriesseasonallyadjusted <- tsData- timeseriescomponents$seasonal
tsstationary <- diff(timeseriesseasonallyadjusted, differences=1)
acf(tsstationary, lag.max=100)
pacf(tsstationary, lag.max=100)
fitARIMA <- arima(tsData, order=c(1,1,1),seasonal = list(order = c(1,0,0), period = 12),method="ML")
coeftest(fitARIMA)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
install.packages("FitAR")
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r')
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
data
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2018,1),frequency=1)
plot(tsData)
#import data
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2018,1),frequency=365)
plot(tsData)
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2018,1),frequency=12)
plot(tsData)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2017,1),frequency=12)
plot(tsData)
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2017,1),frequency=35)
plot(tsData)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2017,1),frequency=12)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2017,1),frequency=12)
plot(tsData)
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2017,1),frequency=12)
plot(tsData)
#decompose into time series components
timeseriescomponents <- decompose(tsData)
plot(timeseriescomponents)
#import data
data<-read.csv("EAN541448860004121675_daily.csv",header=TRUE)
#convert to time series
tsData<- ts(data[2:35,2],start=c(2017,1),frequency=12)
plot(tsData)
#decompose into time series components
timeseriescomponents <- decompose(tsData)
plot(timeseriescomponents)
#detemine stationarity of data
urkpssTest(tsData, type = c("tau"), lags = c("short"),use.lag = NULL, doplot = TRUE)
tsstationary<-diff(tsData, differences=1)
plot(tsstationary)
acf(tsData,lag.max=34)
#remove seasonality
timeseriesseasonallyadjusted <- tsData- timeseriescomponents$seasonal
plot(timeseriesseasonallyadjusted)
tsstationary <- diff(timeseriesseasonallyadjusted, differences=1)
plot(tsstationary)
par(mfrow=c(2,1))
acf(tsstationary, lag.max=34)
pacf(tsstationary, lag.max=34)
#fit the model
fitARIMA<-arima(tsData, order=c(1,1,1),seasonal = list(order = c(1,0,0), period = 12),method="ML")
fitARIMA
coeftest(fitARIMA)
par(mfrow=c(1,1))
acf(fitARIMA$residuals)
#residual diagnostics
boxresult<-LjungBoxTest (fitARIMA$residuals,k=2,StartLag=1) # residual?? or the original series?
par(mfrow=c(2,1))
plot(boxresult[,3],main="Ljung-Box Q Test", ylab="P-values", xlab="Lag")
qqnorm(fitARIMA$residuals)
qqline(fitARIMA$residuals)
auto.arima(tsData, trace=TRUE)
#forcast future values
par(mfrow=c(1,1))
predict(fitARIMA,n.ahead = 5)
futurVal <- forecast.Arima(fitARIMA,h=10, level=c(99.5))
plot.forecast(futurVal)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Data_Daily_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Daily_Consumption_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Daily_Consumption_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Daily_Consumption_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Daily_Consumption_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Daily_Consumption_type_A.r', echo=TRUE)
source('C:/Projects/FinalPEM/autoArima/AutoArima_Daily_Consumption_type_A.r', echo=TRUE)
